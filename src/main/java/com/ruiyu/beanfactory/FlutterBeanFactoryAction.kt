package com.ruiyu.beanfactory

import com.intellij.notification.NotificationDisplayType
import com.intellij.notification.NotificationGroup
import com.intellij.notification.NotificationType
import com.intellij.notification.Notifications
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.PlatformDataKeys
import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.project.Project
import com.ruiyu.file.FileHelpers
import com.ruiyu.file.commitContent
import com.ruiyu.utils.toLowerCaseFirstOne
import java.io.File

class FlutterBeanFactoryAction : AnAction() {

    override fun actionPerformed(e: AnActionEvent) {
        generateAllFile(e.getData(PlatformDataKeys.PROJECT)!!)

    }

    companion object {

        fun generateAllFile(project: Project) {
            val pubSpecConfig = FileHelpers.getPubSpecConfig(project)
            val allClass = FileHelpers.getAllEntityFiles(project)
            //重新生成所有helper类
            FileHelpers.generateAllDartEntityHelper(project, allClass)

            val content = StringBuilder()
            content.append("// ignore_for_file: non_constant_identifier_names\n// ignore_for_file: camel_case_types\n// ignore_for_file: prefer_single_quotes\n\n")
            content.append("// This file is automatically generated. DO NOT EDIT, all your changes would be lost.\n")
            //导包
            allClass.forEach {
                content.append("import 'package:${pubSpecConfig?.name}/${it.second.substringAfter("${pubSpecConfig?.name}/")}")
                content.append("\n")
                content.append("import 'package:${pubSpecConfig?.name}/generated/json/${File(it.second).nameWithoutExtension}_helper.dart';")
                content.append("\n")
            }
            content.append("\n")

            ////
            content.append("""class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}""")

///
            //tojson
            content.append("""  Map<String, dynamic> toJson() {
		return getToJson<T>(runtimeType, this);
  }""")

            content.append("  static _getFromJson<T>(Type type, data, json) {\n" +
                    "    switch (type) {")
            allClass.forEach {
                it.first.forEach { itemFile ->
                    content.append("\t\t\tcase ${itemFile.className}:\n")
                    content.append("\t\t\treturn ${itemFile.className.toLowerCaseFirstOne()}FromJson(data as ${itemFile.className}, json) as T;")
                }
            }
            content.append("    }\n" +
                    "    return data as T;\n" +
                    "  }")

            content.append("  static getToJson<T>(Type type, data) {\n" +
                    "\t\tswitch (type) {")
            allClass.forEach {
                it.first.forEach { itemFile ->
                    content.append("\t\t\tcase ${itemFile.className}:\n")
                    content.append("\t\t\treturn ${itemFile.className.toLowerCaseFirstOne()}ToJson(data as ${itemFile.className});")
                }
            }
            content.append("    }\n" +
                    "    return data as T;\n" +
                    "  }")


            content.append("  static T fromJsonAsT<T>(json) {\n" +
                    "    switch (T.toString()) {")
            allClass.forEach {
                it.first.forEach { itemFile ->
                    content.append("\t\t\tcase '${itemFile.className}':\n")
                    content.append("\t\t\treturn ${itemFile.className}().fromJson(json) as T;")
                }
            }
            content.append("    }\n" +
                    "    return null;\n" +
                    "  }")

            content.append("}")

            FileHelpers.getJsonConvertContentFile(project) {
                it.commitContent(project, content.toString())
            }


            val notificationGroup = NotificationGroup("dart_factory", NotificationDisplayType.BALLOON, true)
            ApplicationManager.getApplication().invokeLater {
                val notification =
                        notificationGroup.createNotification("convert factory is generated", NotificationType.INFORMATION)
                Notifications.Bus.notify(notification, project)
            }

        }
    }
}
